from utils import *
from risks import *
from cvxopt import solvers,matrix

def cvx_helper(old_p,signals,num_of_stocks):

    assert len(old_p) == len(signals)
    num_of_stocks = len(old_p)

    long_signals = [0.0 for _ in range(num_of_stocks)]
    short_signals = [0.0 for _ in range(num_of_stocks)]

    for stock_number,p,signal in zip(range(num_of_stocks),old_p,signals):
        if p > 0: long_signals[stock_number] = 1.0
        elif p<0: short_signals[stock_number] = 1.0
        else:
            if signal ==1: long_signals[stock_number] = 1.0
            elif signal == -1: short_signals[stock_number] = 1.0

    return long_signals,short_signals

def reduce_finder(old_p,c1,c3):
    mins = []
    
    c1_current = 0
    c3_current = 0
    
    for c in old_p:
        if c>0:c1_current += c
        elif c<0: c3_current += c

    c1_diff = max(0,c1_current - c1)
    c3_diff = -max(0,abs(c3_current) - abs(c3))
    
    for c in old_p:
        if c>0:
            value = c - c1_diff
        elif c<0:
            value = c - c3_diff
        else:
            value = 0.0
            
        mins.append(value)

    return mins

def quadratic(covariance,old_p,signals,c1,c3,max_iters = 1000):

    for i in old_p: assert type(i) == float

    num_of_stocks = covariance.shape[0]

    long_signals,short_signals = cvx_helper(old_p,signals,num_of_stocks)

    P = matrix(covariance)
    q = matrix([0.0 for _ in range(num_of_stocks)])
    
    fill_A = []
    fill_b = []
    
    for i,j in zip([long_signals,short_signals],[c1,c3]):
        if sum(abs(k) for k in i) !=0 : 
            fill_A.append(i)
            fill_b.append(j)
        # else:
            # if j != 0:
                # return 'Not Solvable, Error 1'
    
    for p,number,signal in zip(old_p,range(num_of_stocks),signals):
        # if signal == 1.0:
            # filler = [0.0 for _ in range(num_of_stocks)]
            # filler[number] = 1.0
            
            # rank_check_passed = True
            # for n,check in enumerate(fill_A):
                # if check == filler:
                    # rank_check_passed = False
                    # if fill_b[n] != p:
                        # return 'Not Solvable','Error 2'
            
            # if rank_check_passed:
                # fill_A.append(filler)
                # fill_b.append(p)
                
        if signal == 0.0 and p == 0.0:
            filler = [0.0 for _ in range(num_of_stocks)]
            filler[number] = 1.0
            
            fill_A.append(filler)
            fill_b.append(0.0)
        
    mins = reduce_finder(old_p,c1,c3)
        
    fill_G = []
    fill_h = []

    for number,long_signal,short_signal,p in zip(range(num_of_stocks),long_signals,short_signals,mins):
        if long_signal == 1.0:
            appention = [0.0 for _ in range(num_of_stocks)]
            appention[number] = -1.0
            
            fill_G.append(appention)
            fill_h.append(-p)
            
            if short_signal == 1.0:
                print('YOU HAVE DONE SOMETHING WRONG!!!! 1')
                return
                
        if short_signal == 1.0:
        
            appention = [0.0 for _ in range(num_of_stocks)]
            appention[number] = 1.0
            
            fill_G.append(appention)
            fill_h.append(p)
   
    A = matrix(fill_A).trans()
    b = matrix(fill_b)
    G = matrix(fill_G).trans()
    h = matrix(fill_h)

    solvers.options['show_progress'] = False # supress tilting output
    solvers.options['maxiters'] = max_iters
    solvers.options['abstol'] = 1e-3
    solvers.options['feastol'] = 1e-3
    solvers.options['reltol'] = 1e-3
    sol = solvers.qp(P,q,G,h,A,b)

    # r = []
    # x = [sol['x'][i] for i in range(num_of_stocks)]
    # for i in x:
        # if abs(x) > 1e40:
            # r.append(0)
        # else:
            # append(x)
    
    # print(sol['x'])
    return [sol['x'][i] for i in range(num_of_stocks)]

def signal_and_port_convertor(port,signals,is_Friday):
    
    new_port = port.copy()
    new_signals = signals.copy()
    old_position = [0 for _ in range(len(port))]

    for n,p,s in zip(range(len(port)),port,signals):
        if np.sign(p) == (-1)*s:
            new_port[n] = 0.0
            new_signals[n] = 0
        elif np.sign(p) == s:
            new_signals[n] = 0

        old_position[n] = int(np.sign(new_port[n]))
        
    return new_port,new_signals,old_position


if __name__ == '__main__':
    from risks import *
    from enviroment import *
    from utils import *
    env = Enviroment(stocks=stocks)
    risk = sharpe(env.values,66,20)
    
    risk = np.array([[ 1.70797093e-04,  5.72510905e-05,  7.58104515e-05,
         1.21508797e-04,  1.60797174e-04,  1.60819436e-04,
         1.20347638e-04,  1.11185443e-04,  1.02420880e-04,
         1.43807584e-04,  8.62155313e-05,  1.12628311e-04,
         8.35489742e-05,  1.27971053e-04,  5.15389110e-05,
         1.17108332e-04,  7.55142433e-05,  1.14616751e-04,
         1.32141628e-04,  6.25611781e-05,  8.27101645e-05,
         8.99756016e-05,  9.60435494e-05,  5.87949586e-05,
         2.24842864e-04,  8.37028096e-05,  6.84865361e-05,
         1.34332157e-04,  5.24288243e-05],
       [ 5.72510905e-05,  1.08838077e-04,  2.85468949e-05,
         4.51781922e-05,  8.18500859e-05,  9.10743844e-05,
         4.12802907e-05,  1.22168576e-05,  6.99358253e-05,
         8.80282825e-05,  6.44980288e-05,  6.69638682e-05,
         3.81236493e-05,  4.56056881e-05,  2.94682216e-05,
         6.04762837e-05,  3.21839240e-05,  8.31832924e-05,
         1.08268441e-04,  2.64481082e-05,  3.46373449e-05,
         6.05456296e-05,  5.56978819e-05,  1.45672303e-05,
        -2.68211187e-05,  2.96280553e-05,  3.51118017e-05,
         4.88141219e-05,  2.16234695e-05],
       [ 7.58104515e-05,  2.85468949e-05,  2.02479389e-04,
         5.34891364e-05,  1.39750341e-04,  1.18520458e-04,
         7.60525176e-05,  7.86393569e-05,  1.23569273e-04,
         9.11736793e-05,  5.05798433e-05,  1.12731092e-04,
         1.17713467e-05,  6.41714510e-05,  5.21736002e-05,
         6.60980784e-05,  3.96324122e-05,  9.29404823e-05,
         1.22035523e-04,  3.22566492e-05,  2.71421506e-05,
         7.98023538e-05,  1.54439599e-04,  4.33818841e-05,
         9.15704323e-05,  1.01466402e-04,  4.72996403e-05,
         8.35483694e-05,  3.61614373e-05],
       [ 1.21508797e-04,  4.51781922e-05,  5.34891364e-05,
         2.19503068e-04,  1.55002361e-04,  1.21093780e-04,
         9.96006248e-05,  1.06303736e-04,  1.07809996e-04,
         1.49874549e-04,  8.81002257e-05,  1.27763844e-04,
         7.91475482e-05,  1.23736206e-04,  4.85982189e-05,
         1.14662634e-04,  6.72737686e-05,  7.59140579e-05,
         1.69154411e-04,  4.46833668e-05,  8.29629995e-05,
         6.34550119e-05,  7.28725736e-05,  5.95564702e-05,
         1.40912527e-04,  8.11263200e-05,  7.09931949e-05,
         1.28461903e-04,  4.70466160e-05],
       [ 1.60797174e-04,  8.18500859e-05,  1.39750341e-04,
         1.55002361e-04,  4.14010249e-04,  1.51866257e-04,
         1.65691553e-04,  9.79343159e-05,  1.81759684e-04,
         2.86926593e-04,  1.15071663e-04,  1.57801562e-04,
         7.68073459e-05,  1.15742332e-04,  3.96650635e-05,
         1.58512871e-04,  9.60454724e-05,  1.33041360e-04,
         2.62846793e-04,  8.30154592e-05,  8.23792603e-05,
         7.24690747e-05,  1.65383786e-04,  1.23065312e-04,
         9.84776085e-05,  8.70187938e-05,  8.37227868e-05,
         1.62153598e-04,  6.09011682e-05],
       [ 1.60819436e-04,  9.10743844e-05,  1.18520458e-04,
         1.21093780e-04,  1.51866257e-04,  2.81506890e-04,
         1.28261808e-04,  1.50600545e-04,  1.48361743e-04,
         1.49898265e-04,  8.89227339e-05,  1.48908970e-04,
         7.18911353e-05,  1.81131851e-04,  6.32320091e-05,
         1.25374806e-04,  9.99011836e-05,  1.32203654e-04,
         1.87594072e-04,  6.93503894e-05,  9.87983597e-05,
         1.41351358e-04,  9.79207581e-05,  4.16852388e-05,
         1.96303261e-04,  6.84134445e-05,  9.47006922e-05,
         1.66459902e-04,  6.24264092e-05],
       [ 1.20347638e-04,  4.12802907e-05,  7.60525176e-05,
         9.96006248e-05,  1.65691553e-04,  1.28261808e-04,
         1.38065201e-04,  7.42273652e-05,  8.26439007e-05,
         1.37530923e-04,  7.40834798e-05,  9.35982797e-05,
         7.78740608e-05,  1.13050727e-04,  5.14562504e-05,
         1.02924664e-04,  7.62978093e-05,  9.31454116e-05,
         1.40027211e-04,  6.33918649e-05,  6.20520971e-05,
         7.37351741e-05,  9.52406130e-05,  6.04510194e-05,
         1.40908343e-04,  4.51392497e-05,  6.01368044e-05,
         1.32004152e-04,  5.43819890e-05],
       [ 1.11185443e-04,  1.22168576e-05,  7.86393569e-05,
         1.06303736e-04,  9.79343159e-05,  1.50600545e-04,
         7.42273652e-05,  2.03219216e-04,  8.20163937e-05,
         1.02780926e-04,  1.87811813e-05,  5.59609080e-05,
         4.39002599e-05,  1.51850994e-04,  3.76459153e-05,
         7.22123093e-05,  6.48894324e-05,  2.47820544e-05,
         7.15391070e-05,  3.29408249e-05,  6.29105259e-05,
         8.73509073e-05, -3.47328757e-05,  3.63042590e-05,
         2.09051024e-04,  3.20696494e-05,  3.83271301e-05,
         1.23850613e-04,  3.71403838e-05],
       [ 1.02420880e-04,  6.99358253e-05,  1.23569273e-04,
         1.07809996e-04,  1.81759684e-04,  1.48361743e-04,
         8.26439007e-05,  8.20163937e-05,  1.89180811e-04,
         1.56054764e-04,  8.70376486e-05,  1.37112434e-04,
         4.51904215e-05,  8.63767906e-05,  7.23496079e-05,
         1.04159804e-04,  8.34115754e-05,  1.09035303e-04,
         2.38436181e-04,  3.80833241e-05,  6.60907329e-05,
         1.03656717e-04,  1.05991220e-04,  4.50097658e-05,
         1.37380807e-04,  6.80097860e-05,  7.90592386e-05,
         1.16861385e-04,  5.73920564e-05],
       [ 1.43807584e-04,  8.80282825e-05,  9.11736793e-05,
         1.49874549e-04,  2.86926593e-04,  1.49898265e-04,
         1.37530923e-04,  1.02780926e-04,  1.56054764e-04,
         2.47015780e-04,  1.11694745e-04,  1.32404825e-04,
         8.69108118e-05,  1.27455788e-04,  6.17156867e-05,
         1.51810452e-04,  9.17661718e-05,  1.28401905e-04,
         2.57012914e-04,  6.25356443e-05,  7.71963214e-05,
         9.26466574e-05,  1.13137397e-04,  7.55605514e-05,
         1.39267372e-04,  6.70046308e-05,  7.19807230e-05,
         1.49491023e-04,  6.23421800e-05],
       [ 8.62155313e-05,  6.44980288e-05,  5.05798433e-05,
         8.81002257e-05,  1.15071663e-04,  8.89227339e-05,
         7.40834798e-05,  1.87811813e-05,  8.70376486e-05,
         1.11694745e-04,  1.75921970e-04,  1.33676844e-04,
         1.04565744e-04,  6.51572642e-05,  6.15026848e-05,
         7.12191093e-05,  6.80979996e-05,  1.35079516e-04,
         1.18221363e-04,  4.29693993e-05,  6.22990373e-05,
         6.96652553e-05,  1.60481876e-04,  3.77670953e-05,
         1.04206571e-04,  7.51679946e-05,  5.25559747e-05,
         1.06230089e-04,  3.07466633e-05],
       [ 1.12628311e-04,  6.69638682e-05,  1.12731092e-04,
         1.27763844e-04,  1.57801562e-04,  1.48908970e-04,
         9.35982797e-05,  5.59609080e-05,  1.37112434e-04,
         1.32404825e-04,  1.33676844e-04,  2.21759017e-04,
         8.44627869e-05,  8.53720491e-05,  6.57643262e-05,
         1.11511079e-04,  7.43373944e-05,  1.60679987e-04,
         1.48712721e-04,  6.56555612e-05,  5.94406396e-05,
         7.23213151e-05,  2.19800039e-04,  3.86850374e-05,
         1.06649865e-04,  1.68121261e-04,  8.67774307e-05,
         1.10032284e-04,  4.90533796e-05],
       [ 8.35489742e-05,  3.81236493e-05,  1.17713467e-05,
         7.91475482e-05,  7.68073459e-05,  7.18911353e-05,
         7.78740608e-05,  4.39002599e-05,  4.51904215e-05,
         8.69108118e-05,  1.04565744e-04,  8.44627869e-05,
         1.01478445e-04,  7.22022234e-05,  5.15896687e-05,
         5.27815518e-05,  7.12102623e-05,  9.54359612e-05,
         9.38766813e-05,  3.93972650e-05,  5.38298895e-05,
         5.77731311e-05,  9.57680520e-05,  2.59469402e-05,
         1.16408086e-04,  5.20190790e-05,  3.66066625e-05,
         1.00394597e-04,  3.46498179e-05],
       [ 1.27971053e-04,  4.56056881e-05,  6.41714510e-05,
         1.23736206e-04,  1.15742332e-04,  1.81131851e-04,
         1.13050727e-04,  1.51850994e-04,  8.63767906e-05,
         1.27455788e-04,  6.51572642e-05,  8.53720491e-05,
         7.22022234e-05,  2.19616597e-04,  5.19618954e-05,
         9.65690741e-05,  9.59358554e-05,  5.75161145e-05,
         8.89422330e-05,  5.41576949e-05,  7.54779133e-05,
         1.12095649e-04,  2.50679866e-07,  6.17169005e-05,
         2.04049936e-04,  2.64064309e-05,  6.22412665e-05,
         1.63969247e-04,  5.11378636e-05],
       [ 5.15389110e-05,  2.94682216e-05,  5.21736002e-05,
         4.85982189e-05,  3.96650635e-05,  6.32320091e-05,
         5.14562504e-05,  3.76459153e-05,  7.23496079e-05,
         6.17156867e-05,  6.15026848e-05,  6.57643262e-05,
         5.15896687e-05,  5.19618954e-05,  7.92989406e-05,
         4.43135852e-05,  5.20358698e-05,  7.14580318e-05,
         1.47861715e-04,  2.37133293e-05,  3.64697989e-05,
         8.59568507e-05,  7.39458771e-05,  1.32922309e-05,
         9.61361017e-05,  4.44840696e-05,  3.15445092e-05,
         6.14102420e-05,  4.07549023e-05],
       [ 1.17108332e-04,  6.04762837e-05,  6.60980784e-05,
         1.14662634e-04,  1.58512871e-04,  1.25374806e-04,
         1.02924664e-04,  7.22123093e-05,  1.04159804e-04,
         1.51810452e-04,  7.12191093e-05,  1.11511079e-04,
         5.27815518e-05,  9.65690741e-05,  4.43135852e-05,
         2.08736940e-04,  6.86546462e-05,  8.52915700e-05,
         1.50072441e-04,  6.00219375e-05,  5.27514712e-05,
         9.37907209e-05,  4.02870216e-05,  4.19433240e-05,
         1.07216989e-04,  5.46895927e-05,  6.94512866e-05,
         1.06030403e-04,  5.60703044e-05],
       [ 7.55142433e-05,  3.21839240e-05,  3.96324122e-05,
         6.72737686e-05,  9.60454724e-05,  9.99011836e-05,
         7.62978093e-05,  6.48894324e-05,  8.34115754e-05,
         9.17661718e-05,  6.80979996e-05,  7.43373944e-05,
         7.12102623e-05,  9.59358554e-05,  5.20358698e-05,
         6.86546462e-05,  1.14396473e-04,  8.49887855e-05,
         1.37305111e-04,  4.58243070e-05,  6.06387789e-05,
         9.57902246e-05,  4.48233160e-05,  2.83036661e-05,
         1.17630873e-04,  2.83146186e-05,  4.59321774e-05,
         1.28778132e-04,  5.07279489e-05],
       [ 1.14616751e-04,  8.31832924e-05,  9.29404823e-05,
         7.59140579e-05,  1.33041360e-04,  1.32203654e-04,
         9.31454116e-05,  2.47820544e-05,  1.09035303e-04,
         1.28401905e-04,  1.35079516e-04,  1.60679987e-04,
         9.54359612e-05,  5.75161145e-05,  7.14580318e-05,
         8.52915700e-05,  8.49887855e-05,  2.23252514e-04,
         1.78862491e-04,  4.87503013e-05,  5.70492428e-05,
         7.80177443e-05,  2.31000801e-04,  9.39200170e-06,
         6.77932568e-05,  1.27072685e-04,  5.44553529e-05,
         1.14437954e-04,  4.57085598e-05],
       [ 1.32141628e-04,  1.08268441e-04,  1.22035523e-04,
         1.69154411e-04,  2.62846793e-04,  1.87594072e-04,
         1.40027211e-04,  7.15391070e-05,  2.38436181e-04,
         2.57012914e-04,  1.18221363e-04,  1.48712721e-04,
         9.38766813e-05,  8.89422330e-05,  1.47861715e-04,
         1.50072441e-04,  1.37305111e-04,  1.78862491e-04,
         5.86962234e-04,  4.99943895e-05,  9.44456364e-05,
         1.91613806e-04,  1.59891598e-04,  5.14094642e-05,
         1.86408360e-04,  8.71285807e-05,  9.17359636e-05,
         1.38534555e-04,  1.08432766e-04],
       [ 6.25611781e-05,  2.64481082e-05,  3.22566492e-05,
         4.46833668e-05,  8.30154592e-05,  6.93503894e-05,
         6.33918649e-05,  3.29408249e-05,  3.80833241e-05,
         6.25356443e-05,  4.29693993e-05,  6.56555612e-05,
         3.93972650e-05,  5.41576949e-05,  2.37133293e-05,
         6.00219375e-05,  4.58243070e-05,  4.87503013e-05,
         4.99943895e-05,  4.89075987e-05,  3.33913106e-05,
         5.27023759e-05,  5.41378351e-05,  3.20981639e-05,
         4.25606451e-05,  4.22984200e-05,  3.49243101e-05,
         6.57682355e-05,  2.98889745e-05],
       [ 8.27101645e-05,  3.46373449e-05,  2.71421506e-05,
         8.29629995e-05,  8.23792603e-05,  9.87983597e-05,
         6.20520971e-05,  6.29105259e-05,  6.60907329e-05,
         7.71963214e-05,  6.22990373e-05,  5.94406396e-05,
         5.38298895e-05,  7.54779133e-05,  3.64697989e-05,
         5.27514712e-05,  6.06387789e-05,  5.70492428e-05,
         9.44456364e-05,  3.33913106e-05,  9.19754665e-05,
         6.14110966e-05,  4.57404346e-05,  3.77511582e-05,
         1.89939052e-04,  2.88727687e-05,  4.33562360e-05,
         8.58878952e-05,  3.51760104e-05],
       [ 8.99756016e-05,  6.05456296e-05,  7.98023538e-05,
         6.34550119e-05,  7.24690747e-05,  1.41351358e-04,
         7.37351741e-05,  8.73509073e-05,  1.03656717e-04,
         9.26466574e-05,  6.96652553e-05,  7.23213151e-05,
         5.77731311e-05,  1.12095649e-04,  8.59568507e-05,
         9.37907209e-05,  9.57902246e-05,  7.80177443e-05,
         1.91613806e-04,  5.27023759e-05,  6.14110966e-05,
         1.94705598e-04,  5.10298588e-05,  2.29333358e-05,
         1.05420742e-04,  3.32920933e-05,  4.63723348e-05,
         1.13098222e-04,  6.72747259e-05],
       [ 9.60435494e-05,  5.56978819e-05,  1.54439599e-04,
         7.28725736e-05,  1.65383786e-04,  9.79207581e-05,
         9.52406130e-05, -3.47328757e-05,  1.05991220e-04,
         1.13137397e-04,  1.60481876e-04,  2.19800039e-04,
         9.57680520e-05,  2.50679866e-07,  7.39458771e-05,
         4.02870216e-05,  4.48233160e-05,  2.31000801e-04,
         1.59891598e-04,  5.41378351e-05,  4.57404346e-05,
         5.10298588e-05,  4.64697324e-04,  9.71474441e-06,
         1.28008360e-04,  2.42433502e-04,  5.29981591e-05,
         7.15994265e-05,  5.05645496e-05],
       [ 5.87949586e-05,  1.45672303e-05,  4.33818841e-05,
         5.95564702e-05,  1.23065312e-04,  4.16852388e-05,
         6.04510194e-05,  3.63042590e-05,  4.50097658e-05,
         7.55605514e-05,  3.77670953e-05,  3.86850374e-05,
         2.59469402e-05,  6.17169005e-05,  1.32922309e-05,
         4.19433240e-05,  2.83036661e-05,  9.39200170e-06,
         5.14094642e-05,  3.20981639e-05,  3.77511582e-05,
         2.29333358e-05,  9.71474441e-06,  8.55054234e-05,
         5.70789706e-05,  7.01279806e-06,  2.61821463e-05,
         7.13827494e-05,  1.53916430e-05],
       [ 2.24842864e-04, -2.68211187e-05,  9.15704323e-05,
         1.40912527e-04,  9.84776085e-05,  1.96303261e-04,
         1.40908343e-04,  2.09051024e-04,  1.37380807e-04,
         1.39267372e-04,  1.04206571e-04,  1.06649865e-04,
         1.16408086e-04,  2.04049936e-04,  9.61361017e-05,
         1.07216989e-04,  1.17630873e-04,  6.77932568e-05,
         1.86408360e-04,  4.25606451e-05,  1.89939052e-04,
         1.05420742e-04,  1.28008360e-04,  5.70789706e-05,
         1.02093227e-03,  1.61370979e-04,  9.05315983e-05,
         1.76168565e-04,  1.09138333e-04],
       [ 8.37028096e-05,  2.96280553e-05,  1.01466402e-04,
         8.11263200e-05,  8.70187938e-05,  6.84134445e-05,
         4.51392497e-05,  3.20696494e-05,  6.80097860e-05,
         6.70046308e-05,  7.51679946e-05,  1.68121261e-04,
         5.20190790e-05,  2.64064309e-05,  4.44840696e-05,
         5.46895927e-05,  2.83146186e-05,  1.27072685e-04,
         8.71285807e-05,  4.22984200e-05,  2.88727687e-05,
         3.32920933e-05,  2.42433502e-04,  7.01279806e-06,
         1.61370979e-04,  2.34567559e-04,  4.49096139e-05,
         3.35791851e-05,  3.89346533e-05],
       [ 6.84865361e-05,  3.51118017e-05,  4.72996403e-05,
         7.09931949e-05,  8.37227868e-05,  9.47006922e-05,
         6.01368044e-05,  3.83271301e-05,  7.90592386e-05,
         7.19807230e-05,  5.25559747e-05,  8.67774307e-05,
         3.66066625e-05,  6.22412665e-05,  3.15445092e-05,
         6.94512866e-05,  4.59321774e-05,  5.44553529e-05,
         9.17359636e-05,  3.49243101e-05,  4.33562360e-05,
         4.63723348e-05,  5.29981591e-05,  2.61821463e-05,
         9.05315983e-05,  4.49096139e-05,  5.67625445e-05,
         6.77993438e-05,  3.15840005e-05],
       [ 1.34332157e-04,  4.88141219e-05,  8.35483694e-05,
         1.28461903e-04,  1.62153598e-04,  1.66459902e-04,
         1.32004152e-04,  1.23850613e-04,  1.16861385e-04,
         1.49491023e-04,  1.06230089e-04,  1.10032284e-04,
         1.00394597e-04,  1.63969247e-04,  6.14102420e-05,
         1.06030403e-04,  1.28778132e-04,  1.14437954e-04,
         1.38534555e-04,  6.57682355e-05,  8.58878952e-05,
         1.13098222e-04,  7.15994265e-05,  7.13827494e-05,
         1.76168565e-04,  3.35791851e-05,  6.77993438e-05,
         2.26111369e-04,  6.60945532e-05],
       [ 5.24288243e-05,  2.16234695e-05,  3.61614373e-05,
         4.70466160e-05,  6.09011682e-05,  6.24264092e-05,
         5.43819890e-05,  3.71403838e-05,  5.73920564e-05,
         6.23421800e-05,  3.07466633e-05,  4.90533796e-05,
         3.46498179e-05,  5.11378636e-05,  4.07549023e-05,
         5.60703044e-05,  5.07279489e-05,  4.57085598e-05,
         1.08432766e-04,  2.98889745e-05,  3.51760104e-05,
         6.72747259e-05,  5.05645496e-05,  1.53916430e-05,
         1.09138333e-04,  3.89346533e-05,  3.15840005e-05,
         6.60945532e-05,  4.32533945e-05]])
    
    old_p = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
    signals =  [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0]
    c1,c3 = (0.5,0.5)
    
    test = quadratic(risk,old_p,signals,c1,c3)
    
    
