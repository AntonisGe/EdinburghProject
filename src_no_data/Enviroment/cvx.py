from utils import *
from risks import *
from cvxopt import solvers,matrix

def cvx_helper(old_p,signals,num_of_stocks):

    assert len(old_p) == len(signals)
    num_of_stocks = len(old_p)

    long_signals = [0.0 for _ in range(num_of_stocks)]
    short_signals = [0.0 for _ in range(num_of_stocks)]

    for stock_number,p,signal in zip(range(num_of_stocks),old_p,signals):
        if p > 0: long_signals[stock_number] = 1.0
        elif p<0: short_signals[stock_number] = 1.0
        else:
            if signal ==1: long_signals[stock_number] = 1.0
            elif signal == -1: short_signals[stock_number] = 1.0

    return long_signals,short_signals

def reduce_finder(old_p,c1,c3):
    mins = []
    
    c1_current = 0
    c3_current = 0
    
    for c in old_p:
        if c>0:c1_current += c
        elif c<0: c3_current += c

    c1_diff = max(0,c1_current - c1)
    c3_diff = -max(0,abs(c3_current) - abs(c3))
    
    for c in old_p:
        if c>0:
            value = max(c - c1_diff,0)
        elif c<0:
            value = min(c - c3_diff,0)
        else:
            value = 0.0
            
        mins.append(value)

    return mins

def quadratic(covariance,old_p,signals,c1,c3,max_iters = 1000):

    for i in old_p: assert type(i) == float

    num_of_stocks = covariance.shape[0]

    long_signals,short_signals = cvx_helper(old_p,signals,num_of_stocks)

    P = matrix(covariance)
    q = matrix([0.0 for _ in range(num_of_stocks)])
    
    fill_A = []
    fill_b = []
    
    for i,j in zip([long_signals,short_signals],[c1,c3]):
        if sum(abs(k) for k in i) !=0 : 
            fill_A.append(i)
            fill_b.append(j)
            
        # else:
            # if j != 0:
                # return 'Not Solvable, Error 1'
    
    for p,number,signal in zip(old_p,range(num_of_stocks),signals):
        # if signal == 1.0:
            # filler = [0.0 for _ in range(num_of_stocks)]
            # filler[number] = 1.0
            
            # rank_check_passed = True
            # for n,check in enumerate(fill_A):
                # if check == filler:
                    # rank_check_passed = False
                    # if fill_b[n] != p:
                        # return 'Not Solvable','Error 2'
            
            # if rank_check_passed:
                # fill_A.append(filler)
                # fill_b.append(p)
                
        if signal == 0.0 and p == 0.0:
            filler = [0.0 for _ in range(num_of_stocks)]
            filler[number] = 1.0
            
            fill_A.append(filler)
            fill_b.append(0.0)
        
    mins = reduce_finder(old_p,c1,c3)
        
    fill_G = []
    fill_h = []

    for number,long_signal,short_signal,p in zip(range(num_of_stocks),long_signals,short_signals,mins):
        if long_signal == 1.0:
            appention = [0.0 for _ in range(num_of_stocks)]
            appention[number] = -1.0
            
            fill_G.append(appention)
            fill_h.append(-p)
            
            if short_signal == 1.0:
                print('YOU HAVE DONE SOMETHING WRONG!!!! 1')
                return
                
        if short_signal == 1.0:
        
            appention = [0.0 for _ in range(num_of_stocks)]
            appention[number] = 1.0
            
            fill_G.append(appention)
            fill_h.append(p)
   
    A = matrix(fill_A).trans()
    b = matrix(fill_b)
    G = matrix(fill_G).trans()
    h = matrix(fill_h)

    solvers.options['show_progress'] = False # supress tilting output
    solvers.options['maxiters'] = max_iters
    # solvers.options['abstol'] = 1e-3
    # solvers.options['feastol'] = 1e-3
    # solvers.options['reltol'] = 1e-3
    sol = solvers.qp(P,q,G,h,A,b)

    # r = []
    # x = [sol['x'][i] for i in range(num_of_stocks)]
    # for i in x:
        # if abs(x) > 1e40:
            # r.append(0)
        # else:
            # append(x)
    
    # print(sol['x'])
    return [sol['x'][i] for i in range(num_of_stocks)]

def signal_and_port_convertor(port,signals,is_Friday):
    
    new_port = port.copy()
    new_signals = signals.copy()
    old_position = [0 for _ in range(len(port))]

    for n,p,s in zip(range(len(port)),port,signals):
        if np.sign(p) == (-1)*s:
            new_port[n] = 0.0
            new_signals[n] = 0
        elif np.sign(p) == s:
            new_signals[n] = 0

        old_position[n] = int(np.sign(new_port[n]))
        
    return new_port,new_signals,old_position


if __name__ == '__main__':
    from risks import *
    from enviroment import *
    from utils import *
    env = Enviroment(stocks=stocks)
    risk = sharpe(env.values,66,20)
    
    risk = np.array([[ 4.94962496e-04,  1.58497038e-04,  1.74173999e-04,
         1.78936649e-04,  2.54452951e-04,  1.55166278e-04,
         1.69118115e-04,  1.68791055e-04,  1.85829521e-04,
         2.07328432e-04,  1.48378882e-04,  2.10325298e-04,
         8.85574582e-05,  2.61785464e-04,  4.60351028e-05,
         1.88632684e-04,  7.16217733e-05,  2.02735798e-04,
         1.45781552e-04,  4.93862215e-05,  1.69328317e-04,
         1.94019759e-04,  1.98582118e-04,  9.04437597e-05,
         6.90013346e-05,  1.23744942e-04,  5.18167333e-05,
         1.98350321e-04,  8.47439592e-05],
       [ 1.58497038e-04,  1.45161197e-04,  8.33896427e-05,
         8.80440513e-05,  1.21352463e-04,  8.96427833e-05,
         1.06506353e-04,  9.41227792e-05,  9.23235714e-05,
         1.16173837e-04,  8.77566454e-05,  1.06097264e-04,
         5.99970392e-05,  1.50031796e-04,  4.57758438e-05,
         1.08997700e-04,  6.29315170e-05,  7.10562724e-05,
         7.91369067e-05,  3.34261674e-05,  1.10888421e-04,
         1.05519384e-04,  1.01404248e-04,  6.08554193e-05,
         5.17099306e-05,  8.94517109e-05,  5.67303127e-05,
         1.15397958e-04,  5.69977495e-05],
       [ 1.74173999e-04,  8.33896427e-05,  1.74771955e-04,
         9.00760215e-05,  1.40317122e-04,  1.18643156e-04,
         8.33070312e-05,  1.15559484e-04,  9.08078787e-05,
         1.11853859e-04,  8.20966302e-05,  9.28279791e-05,
         2.59249152e-05,  1.47761415e-04,  4.07262513e-05,
         8.97367221e-05,  4.80167275e-05,  9.23330049e-05,
         6.66135386e-05,  3.64649786e-05,  7.37551335e-05,
         1.22386495e-04,  1.36349905e-04,  4.39181085e-05,
         2.61114158e-05, -1.34901158e-05,  4.59917361e-05,
         8.69311750e-05,  5.28139385e-05],
       [ 1.78936649e-04,  8.80440513e-05,  9.00760215e-05,
         2.77280163e-04,  2.02930618e-04,  1.30653745e-04,
         1.41025999e-04,  1.38511130e-04,  1.42213759e-04,
         1.97531879e-04,  1.05096784e-04,  1.11393598e-04,
         6.00573925e-05,  1.60196070e-04,  8.22947069e-05,
         1.42225220e-04,  6.07478814e-05,  9.29848867e-05,
         1.01331689e-04,  3.32579019e-05,  8.21846181e-05,
         1.25932679e-04,  1.14730647e-04,  3.84064148e-05,
         5.90733361e-05,  1.34864204e-04,  3.32492248e-05,
         1.66315436e-04,  4.27659715e-05],
       [ 2.54452951e-04,  1.21352463e-04,  1.40317122e-04,
         2.02930618e-04,  3.01127665e-04,  1.44531667e-04,
         1.69566152e-04,  1.52834074e-04,  1.57145271e-04,
         2.27069481e-04,  1.39927708e-04,  1.56092918e-04,
         9.27490763e-05,  1.99750996e-04,  8.58054633e-05,
         1.51517460e-04,  1.02526543e-04,  1.23309077e-04,
         1.24913066e-04,  4.60289181e-05,  1.25267581e-04,
         1.41863836e-04,  2.09209953e-04,  8.40768671e-05,
         9.17338169e-05,  1.31244562e-04,  5.59505506e-05,
         1.69815161e-04,  6.90540855e-05],
       [ 1.55166278e-04,  8.96427833e-05,  1.18643156e-04,
         1.30653745e-04,  1.44531667e-04,  2.05297101e-04,
         9.97058278e-05,  1.69179897e-04,  1.16134593e-04,
         1.47679679e-04,  1.06390993e-04,  1.58480297e-04,
         2.09458739e-05,  1.66654741e-04,  3.05591018e-05,
         1.17224739e-04,  3.44482185e-05,  1.48095101e-04,
         9.08884827e-05,  3.31940903e-05,  1.04294813e-04,
         1.02296852e-04,  8.53476265e-05,  4.51386826e-05,
         4.78832845e-05,  4.21806803e-05,  5.65826308e-05,
         1.19269486e-04,  5.52978362e-05],
       [ 1.69118115e-04,  1.06506353e-04,  8.33070312e-05,
         1.41025999e-04,  1.69566152e-04,  9.97058278e-05,
         1.59362928e-04,  1.17950208e-04,  1.29129205e-04,
         1.80371693e-04,  1.03747747e-04,  1.25916434e-04,
         7.59044256e-05,  1.73492805e-04,  6.92689341e-05,
         1.26337569e-04,  7.21531216e-05,  8.96446252e-05,
         8.77879487e-05,  3.17417402e-05,  1.01527817e-04,
         1.18039983e-04,  1.65642733e-04,  5.66305306e-05,
         9.29450556e-05,  1.28474561e-04,  5.06079617e-05,
         1.35918950e-04,  5.03615380e-05],
       [ 1.68791055e-04,  9.41227792e-05,  1.15559484e-04,
         1.38511130e-04,  1.52834074e-04,  1.69179897e-04,
         1.17950208e-04,  2.92310104e-04,  1.23213393e-04,
         1.64656451e-04,  1.19287446e-04,  1.37823446e-04,
         4.32194001e-05,  2.44313661e-04,  4.44698121e-05,
         1.36428927e-04,  4.29380325e-05,  1.56758786e-04,
         9.21979760e-05,  3.85568483e-05,  1.06165533e-04,
         1.41986432e-04,  1.33261859e-04,  5.91811859e-05,
        -3.39255313e-05,  4.65090751e-05,  5.03416305e-05,
         1.53259897e-04,  5.85650434e-05],
       [ 1.85829521e-04,  9.23235714e-05,  9.08078787e-05,
         1.42213759e-04,  1.57145271e-04,  1.16134593e-04,
         1.29129205e-04,  1.23213393e-04,  1.70045545e-04,
         1.63075378e-04,  8.92267417e-05,  1.34752417e-04,
         5.76701236e-05,  1.60884529e-04,  6.67705577e-05,
         1.27108420e-04,  4.75707769e-05,  9.82905961e-05,
         9.36430115e-05,  3.49608337e-05,  9.97955720e-05,
         1.31034878e-04,  1.74254463e-04,  5.37344493e-05,
         1.05585388e-04,  8.79475025e-05,  6.52734844e-05,
         1.19045439e-04,  4.68522081e-05],
       [ 2.07328432e-04,  1.16173837e-04,  1.11853859e-04,
         1.97531879e-04,  2.27069481e-04,  1.47679679e-04,
         1.80371693e-04,  1.64656451e-04,  1.63075378e-04,
         2.66310302e-04,  1.16280797e-04,  1.67593736e-04,
         8.52199614e-05,  2.18148940e-04,  8.58624570e-05,
         1.64101692e-04,  7.93983646e-05,  1.31877069e-04,
         1.33235807e-04,  4.62186530e-05,  1.38513852e-04,
         1.28458025e-04,  2.16294423e-04,  5.55999468e-05,
         1.04782831e-04,  1.59106533e-04,  6.97278884e-05,
         1.89538486e-04,  6.93885645e-05],
       [ 1.48378882e-04,  8.77566454e-05,  8.20966302e-05,
         1.05096784e-04,  1.39927708e-04,  1.06390993e-04,
         1.03747747e-04,  1.19287446e-04,  8.92267417e-05,
         1.16280797e-04,  1.05619302e-04,  9.60483197e-05,
         4.81298904e-05,  1.34292931e-04,  3.84653492e-05,
         1.03834767e-04,  5.11404830e-05,  7.96211784e-05,
         6.23123417e-05,  2.39180032e-05,  7.74122116e-05,
         9.38094177e-05,  1.00918211e-04,  5.14581543e-05,
         5.86252049e-05,  6.11675099e-05,  3.46226913e-05,
         1.02635038e-04,  3.92478175e-05],
       [ 2.10325298e-04,  1.06097264e-04,  9.28279791e-05,
         1.11393598e-04,  1.56092918e-04,  1.58480297e-04,
         1.25916434e-04,  1.37823446e-04,  1.34752417e-04,
         1.67593736e-04,  9.60483197e-05,  2.16558450e-04,
         5.09534264e-05,  1.70408792e-04,  3.75224820e-05,
         1.25399676e-04,  3.45090861e-05,  1.62988476e-04,
         1.11103354e-04,  2.86110469e-05,  1.22314842e-04,
         1.13726039e-04,  1.26282804e-04,  5.19828546e-05,
         4.52807075e-05,  1.65054217e-04,  7.10592577e-05,
         1.12034684e-04,  6.13193346e-05],
       [ 8.85574582e-05,  5.99970392e-05,  2.59249152e-05,
         6.00573925e-05,  9.27490763e-05,  2.09458739e-05,
         7.59044256e-05,  4.32194001e-05,  5.76701236e-05,
         8.52199614e-05,  4.81298904e-05,  5.09534264e-05,
         6.48251456e-05,  8.88300939e-05,  3.94797031e-05,
         6.18711626e-05,  4.26726034e-05,  2.10850652e-05,
         3.89805826e-05,  1.64891855e-05,  4.73490461e-05,
         4.87694822e-05,  9.64320980e-05,  4.34021014e-05,
         3.67857960e-05,  8.14827849e-05,  2.58434941e-05,
         6.90595240e-05,  2.29177786e-05],
       [ 2.61785464e-04,  1.50031796e-04,  1.47761415e-04,
         1.60196070e-04,  1.99750996e-04,  1.66654741e-04,
         1.73492805e-04,  2.44313661e-04,  1.60884529e-04,
         2.18148940e-04,  1.34292931e-04,  1.70408792e-04,
         8.88300939e-05,  3.70758947e-04,  6.40564977e-05,
         1.64225866e-04,  6.83255109e-05,  1.87581095e-04,
         1.19022868e-04,  5.86934273e-05,  1.69494481e-04,
         1.44929658e-04,  2.47514389e-04,  8.92984117e-05,
        -2.00431611e-05,  6.43164742e-05,  7.31649134e-05,
         2.07877930e-04,  7.61597390e-05],
       [ 4.60351028e-05,  4.57758438e-05,  4.07262513e-05,
         8.22947069e-05,  8.58054633e-05,  3.05591018e-05,
         6.92689341e-05,  4.44698121e-05,  6.67705577e-05,
         8.58624570e-05,  3.84653492e-05,  3.75224820e-05,
         3.94797031e-05,  6.40564977e-05,  8.14689893e-05,
         4.75316723e-05,  3.07484756e-05,  2.07703862e-05,
         4.28172083e-05,  2.44294419e-05,  4.58211143e-05,
         5.54972666e-05,  1.07801735e-04,  3.05807378e-05,
         6.54357054e-05,  4.05100573e-05,  2.68139912e-05,
         5.60656604e-05,  1.02853492e-05],
       [ 1.88632684e-04,  1.08997700e-04,  8.97367221e-05,
         1.42225220e-04,  1.51517460e-04,  1.17224739e-04,
         1.26337569e-04,  1.36428927e-04,  1.27108420e-04,
         1.64101692e-04,  1.03834767e-04,  1.25399676e-04,
         6.18711626e-05,  1.64225866e-04,  4.75316723e-05,
         1.49528987e-04,  4.78446448e-05,  1.03383637e-04,
         9.65166534e-05,  2.92052382e-05,  1.02283609e-04,
         1.17102939e-04,  1.52745872e-04,  5.35054148e-05,
         6.77485227e-05,  1.16236892e-04,  5.72126754e-05,
         1.38004387e-04,  5.64167894e-05],
       [ 7.16217733e-05,  6.29315170e-05,  4.80167275e-05,
         6.07478814e-05,  1.02526543e-04,  3.44482185e-05,
         7.21531216e-05,  4.29380325e-05,  4.75707769e-05,
         7.93983646e-05,  5.11404830e-05,  3.45090861e-05,
         4.26726034e-05,  6.83255109e-05,  3.07484756e-05,
         4.78446448e-05,  7.61157002e-05,  6.19601230e-06,
         3.27889182e-05,  2.50434007e-05,  4.80577959e-05,
         5.72266921e-05,  4.49734681e-05,  3.10769387e-05,
         4.47766087e-05,  5.38713726e-05,  1.90261516e-05,
         6.34211807e-05,  2.47255931e-05],
       [ 2.02735798e-04,  7.10562724e-05,  9.23330049e-05,
         9.29848867e-05,  1.23309077e-04,  1.48095101e-04,
         8.96446252e-05,  1.56758786e-04,  9.82905961e-05,
         1.31877069e-04,  7.96211784e-05,  1.62988476e-04,
         2.10850652e-05,  1.87581095e-04,  2.07703862e-05,
         1.03383637e-04,  6.19601230e-06,  1.95140699e-04,
         9.36208906e-05,  2.03388352e-05,  1.05340569e-04,
         8.03357982e-05,  1.25944224e-04,  4.17205674e-05,
        -2.49275855e-05,  5.36407323e-05,  4.49946841e-05,
         1.08410642e-04,  5.09751696e-05],
       [ 1.45781552e-04,  7.91369067e-05,  6.66135386e-05,
         1.01331689e-04,  1.24913066e-04,  9.08884827e-05,
         8.77879487e-05,  9.21979760e-05,  9.36430115e-05,
         1.33235807e-04,  6.23123417e-05,  1.11103354e-04,
         3.89805826e-05,  1.19022868e-04,  4.28172083e-05,
         9.65166534e-05,  3.27889182e-05,  9.36208906e-05,
         1.16883872e-04,  2.33542388e-05,  1.12540119e-04,
         6.30788158e-05,  1.14882991e-04,  3.33520438e-05,
         6.96010322e-05,  1.31151645e-04,  5.05741363e-05,
         1.01149638e-04,  5.42627702e-05],
       [ 4.93862215e-05,  3.34261674e-05,  3.64649786e-05,
         3.32579019e-05,  4.60289181e-05,  3.31940903e-05,
         3.17417402e-05,  3.85568483e-05,  3.49608337e-05,
         4.62186530e-05,  2.39180032e-05,  2.86110469e-05,
         1.64891855e-05,  5.86934273e-05,  2.44294419e-05,
         2.92052382e-05,  2.50434007e-05,  2.03388352e-05,
         2.33542388e-05,  2.58384722e-05,  3.40250965e-05,
         3.75599868e-05,  4.87767720e-05,  1.62499295e-05,
         2.12849288e-05, -4.47213565e-07,  1.70715740e-05,
         3.88241845e-05,  1.09523716e-05],
       [ 1.69328317e-04,  1.10888421e-04,  7.37551335e-05,
         8.21846181e-05,  1.25267581e-04,  1.04294813e-04,
         1.01527817e-04,  1.06165533e-04,  9.97955720e-05,
         1.38513852e-04,  7.74122116e-05,  1.22314842e-04,
         4.73490461e-05,  1.69494481e-04,  4.58211143e-05,
         1.02283609e-04,  4.80577959e-05,  1.05340569e-04,
         1.12540119e-04,  3.40250965e-05,  1.66151962e-04,
         7.13621168e-05,  1.34535401e-04,  5.39234365e-05,
         9.15076533e-05,  7.58539831e-05,  6.06272226e-05,
         1.26922829e-04,  5.81755980e-05],
       [ 1.94019759e-04,  1.05519384e-04,  1.22386495e-04,
         1.25932679e-04,  1.41863836e-04,  1.02296852e-04,
         1.18039983e-04,  1.41986432e-04,  1.31034878e-04,
         1.28458025e-04,  9.38094177e-05,  1.13726039e-04,
         4.87694822e-05,  1.44929658e-04,  5.54972666e-05,
         1.17102939e-04,  5.72266921e-05,  8.03357982e-05,
         6.30788158e-05,  3.75599868e-05,  7.13621168e-05,
         1.88842837e-04,  1.28902341e-04,  4.58792670e-05,
         5.86503740e-05,  2.09965668e-05,  4.54045504e-05,
         1.12209286e-04,  3.92186585e-05],
       [ 1.98582118e-04,  1.01404248e-04,  1.36349905e-04,
         1.14730647e-04,  2.09209953e-04,  8.53476265e-05,
         1.65642733e-04,  1.33261859e-04,  1.74254463e-04,
         2.16294423e-04,  1.00918211e-04,  1.26282804e-04,
         9.64320980e-05,  2.47514389e-04,  1.07801735e-04,
         1.52745872e-04,  4.49734681e-05,  1.25944224e-04,
         1.14882991e-04,  4.87767720e-05,  1.34535401e-04,
         1.28902341e-04,  3.99526363e-04,  8.74114754e-05,
         1.31806037e-04,  3.05859886e-05,  9.06659329e-05,
         1.52915923e-04,  5.54052496e-05],
       [ 9.04437597e-05,  6.08554193e-05,  4.39181085e-05,
         3.84064148e-05,  8.40768671e-05,  4.51386826e-05,
         5.66305306e-05,  5.91811859e-05,  5.37344493e-05,
         5.55999468e-05,  5.14581543e-05,  5.19828546e-05,
         4.34021014e-05,  8.92984117e-05,  3.05807378e-05,
         5.35054148e-05,  3.10769387e-05,  4.17205674e-05,
         3.33520438e-05,  1.62499295e-05,  5.39234365e-05,
         4.58792670e-05,  8.74114754e-05,  5.90118455e-05,
         2.16883090e-05,  6.98540429e-06,  2.73945212e-05,
         5.99654281e-05,  2.91521202e-05],
       [ 6.90013346e-05,  5.17099306e-05,  2.61114158e-05,
         5.90733361e-05,  9.17338169e-05,  4.78832845e-05,
         9.29450556e-05, -3.39255313e-05,  1.05585388e-04,
         1.04782831e-04,  5.86252049e-05,  4.52807075e-05,
         3.67857960e-05, -2.00431611e-05,  6.54357054e-05,
         6.77485227e-05,  4.47766087e-05, -2.49275855e-05,
         6.96010322e-05,  2.12849288e-05,  9.15076533e-05,
         5.86503740e-05,  1.31806037e-04,  2.16883090e-05,
         3.35205106e-04,  6.00255877e-05,  5.04288785e-05,
         5.82472504e-05,  2.00197114e-05],
       [ 1.23744942e-04,  8.94517109e-05, -1.34901158e-05,
         1.34864204e-04,  1.31244562e-04,  4.21806803e-05,
         1.28474561e-04,  4.65090751e-05,  8.79475025e-05,
         1.59106533e-04,  6.11675099e-05,  1.65054217e-04,
         8.14827849e-05,  6.43164742e-05,  4.05100573e-05,
         1.16236892e-04,  5.38713726e-05,  5.36407323e-05,
         1.31151645e-04, -4.47213565e-07,  7.58539831e-05,
         2.09965668e-05,  3.05859886e-05,  6.98540429e-06,
         6.00255877e-05,  5.83466368e-04,  6.18188691e-05,
         7.01960142e-05,  6.72918927e-05],
       [ 5.18167333e-05,  5.67303127e-05,  4.59917361e-05,
         3.32492248e-05,  5.59505506e-05,  5.65826308e-05,
         5.06079617e-05,  5.03416305e-05,  6.52734844e-05,
         6.97278884e-05,  3.46226913e-05,  7.10592577e-05,
         2.58434941e-05,  7.31649134e-05,  2.68139912e-05,
         5.72126754e-05,  1.90261516e-05,  4.49946841e-05,
         5.05741363e-05,  1.70715740e-05,  6.06272226e-05,
         4.54045504e-05,  9.06659329e-05,  2.73945212e-05,
         5.04288785e-05,  6.18188691e-05,  5.09162815e-05,
         4.42263360e-05,  3.20904318e-05],
       [ 1.98350321e-04,  1.15397958e-04,  8.69311750e-05,
         1.66315436e-04,  1.69815161e-04,  1.19269486e-04,
         1.35918950e-04,  1.53259897e-04,  1.19045439e-04,
         1.89538486e-04,  1.02635038e-04,  1.12034684e-04,
         6.90595240e-05,  2.07877930e-04,  5.60656604e-05,
         1.38004387e-04,  6.34211807e-05,  1.08410642e-04,
         1.01149638e-04,  3.88241845e-05,  1.26922829e-04,
         1.12209286e-04,  1.52915923e-04,  5.99654281e-05,
         5.82472504e-05,  7.01960142e-05,  4.42263360e-05,
         1.92576240e-04,  5.83113430e-05],
       [ 8.47439592e-05,  5.69977495e-05,  5.28139385e-05,
         4.27659715e-05,  6.90540855e-05,  5.52978362e-05,
         5.03615380e-05,  5.85650434e-05,  4.68522081e-05,
         6.93885645e-05,  3.92478175e-05,  6.13193346e-05,
         2.29177786e-05,  7.61597390e-05,  1.02853492e-05,
         5.64167894e-05,  2.47255931e-05,  5.09751696e-05,
         5.42627702e-05,  1.09523716e-05,  5.81755980e-05,
         3.92186585e-05,  5.54052496e-05,  2.91521202e-05,
         2.00197114e-05,  6.72918927e-05,  3.20904318e-05,
         5.83113430e-05,  5.06479294e-05]])
    
    old_p = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
    signals =  [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0]
    c1,c3 = (0.5,0.5)
    
    test = quadratic(risk,old_p,signals,c1,c3)
    
    
